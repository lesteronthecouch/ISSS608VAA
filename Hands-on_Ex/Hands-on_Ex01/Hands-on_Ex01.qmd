---
title: "Hands-on Exercise 1"
author: "Peng Hsiao Yuan"
format: html
---

Author: "Peng Hsiao Yuan"

##1.2 Getting Started

## Install and launch R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer.

If they are, they will be launched into R.

```{r}
pacman::p_load(tidyverse)
install.packages("ggplot2")
library(ggplot2)
```

## Importing the data

```{r}
exam_data <- read.csv("data/Exam_data.csv")
```

## Plotting a simple bar chart

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```

```{r}
hist(exam_data$MATHS)
```

## 1.4 Grammar of Graphics

A short description of each building block are as follows:

-   *Data*: The dataset being plotted.

-   *Aesthetics* take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   *Geometrics*: The visual elements used for our data, such as point, bar or line.

-   *Facets* split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   *Statistics*, statiscal transformations that summarise data (e.g. mean, confidence intervals).

-   *Coordinate systems* define the plane on which data are mapped on the graphic.

-   *Themes* modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

## 1.5 Essential Grammatical Elements in ggplot2: data

```{r}
ggplot(data=exam_data)
```

Note: A blank canvas appears. ggplot() initializes a ggplot object. The data argument defines the dataset to be used for plotting. If the dataset is not already a data.frame, it will be converted to one by fortify().

## 1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

## 1.7 Essential Grammatical Elements in ggplot2: geom

1.  geom_point for drawing individual points (e.g., a scatter plot)

2.  geom_line for drawing lines (e.g., for a line charts)

3.  geom_smooth for drawing smoothed lines (e.g., for simple trends or\
    approximations)

4.  geom_bar for drawing bars (e.g., for bar charts)

5.  geom_histogram for drawing binned values (e.g. a histogram)

6.  geom_polygon for drawing arbitrary shapes

7.  geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

## 1.7.1 Geometric Objects: geom_bar

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

## 1.7.2 Geometric Objects: geom_dotplot

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

## 1.7.3 Geometric Objects: geom_histogram()

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram() 
```

## 1.7.4 Modifying a geometric object by changing geom()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  
```

## 1.7.5 Modifying a geometric object by changing aes()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

## 1.7.6 Geometric Objects: geom-density()

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()     
```

The code chunk below plots two kernel density lines by using colour or fill arguments of aes()

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

## 1.7.7 Geometric Objects: geom_boxplot

geom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()   
```

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

## 1.7.8 Geometric Objects: geom_violin

geom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

## 1.7.9 Geometric Objects: geom_point()

geom_point() is especially useful for creating scatterplot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()        
```

## 1.7.10 geom objects can be combined

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)    
```

## 1.8 Essential Grammatical Elements in ggplot2: stat

The Statistics functions statistically transform data, usually as some form of summary. For example:

frequency of values of a variable (bar graph) a mean a confidence limit There are two ways to use these functions: add a stat\_() function and override the default geom, or add a geom\_() function and override the default stat. \## 1.8.1 Working with stat()

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```

## 1.8.2 Working with stat - the stat_summary() method

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun = "mean",         
               colour ="red",        
               size=4)               
```

## 1.8.3 Working with stat - the geom() method

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun="mean",           
             colour="red",          
             size=4)          
```

## 1.8.4 Adding a best fit curve on a scatterplot?

The scatter-plot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatter-plot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5)
```

## 1.9 Essential Grammatical Elements in ggplot2: Facets

```{r}

```

## 1.9.1 Working with facet_wrap()

facet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

## 1.9.2 facet_grid() function

facet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

## 1.10 Essential Grammatical Elements in ggplot2: Coordinates

## 1.10.1 Working with Coordinate

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

## 1.10.2 Changing the y- and x-axis range

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

## 1.11 Essential Grammatical Elements in ggplot2: themes

## 1.11.1 Working with theme

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

A horizontal bar chart plotted using theme_classic().

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```
