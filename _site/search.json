[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "",
    "text": "1. Environment Set-up\n\n\n1.1 Background Information and Data Source\nThe data set is downloaded from “https://www.singstat.gov.sg/”\nFile Name: “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”\n\n\n1.2 Data Processing\nImporting Data and Install Packages\n\necho = FALSE\npacman::p_load(\n  tidyverse, haven, knitr,\n  patchwork, ggthemes, scales,\n  ggridges, ggpubr, gganimate,\n  ggdist, ggtext, ggalt,\n  cowplot, ggnewscale,\n  sf, viridis\n)\n\nLoading and Installing Packages\n\n\nRead the file and Clean BOM\n\nraw_lines &lt;- readLines(\"respopagesexfa2024/respopagesexfa2024.csv\", encoding = \"UTF-8\")\nwriteLines(raw_lines, \"respopagesexfa2024/respopagesexfa2024_clean.csv\", useBytes = TRUE)\n\n\n\nRead the Clean File\n\necho = FALSE\ndf &lt;- read_csv(\"respopagesexfa2024/respopagesexfa2024_clean.csv\")\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nTransform the Pop Data into Numbers and Remove NA\n\ndf_clean &lt;- df %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0)\n\n\n\n2. Background and Notes\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\ndf &lt;- tibble(\n  PA = c(\"Planning Area\"),\n  SZ = c(\"Subzone\"),\n  AG = c(\"Age Group\"),\n  Sex = c(\"Sex\"),\n  FA = c(\"Floor Area of Residence\"),\n  Pop = c(\"Population\"),\n  Time = c(\"Resident Count(Population)\")\n)\n\ndf %&gt;%\n  knitr::kable(caption = \"Column Information\") %&gt;%\n  kableExtra::kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"bordered\"),\n    full_width = FALSE\n  )\n\n\nColumn Information\n\n\nPA\nSZ\nAG\nSex\nFA\nPop\nTime\n\n\n\n\nPlanning Area\nSubzone\nAge Group\nSex\nFloor Area of Residence\nPopulation\nResident Count(Population)\n\n\n\n\n\n\n\n2.1 Task Objective\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualizations for the article.\nNote:\n\nFor June 2024, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10.\nThe data may not add up due to rounding.\n\n\n\n2 Distribution Analysis -\nSummarize the Pop Data by Planning Area\n\ndf_summary &lt;- df_clean %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop))\n\nThe code below plots the distributions of population by removing lowest 10 values from the data\nX: Planning area\nY: Total population by area in 2024\n\nbottom10_pa &lt;- df_summary %&gt;%\n  slice_min(Total_Pop, n = 10) %&gt;%\n  pull(PA)\n\ndf_summary_filtered &lt;- df_summary %&gt;%\n  filter(!PA %in% bottom10_pa)\n\nggplot(df_summary_filtered, aes(x = reorder(PA, -Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"lightblue\", width = 0.75) +\n  scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +   # 關鍵：貼底\n  labs(\n    x = \"Planning Area\",\n    y = \"Total Population\",\n    title = \"Total Population by Planning Area (2024)\"\n  ) +\n  theme_classic(base_size = 26) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThe bar chart above suggests that Tampines are the most populated area according to the survey. This outcome also indicates that the outskirt area such as Tampines, Bedok, Jurong West and Woodlands are among the most populated residential area. This could be attributed to the higher rent in the central area, convenient public transportation nationwide or greener environment.\n\ndf_prop &lt;- df_clean %&gt;%\n  group_by(PA, AG) %&gt;%\n  summarise(Total_Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Proportion = Total_Pop / sum(Total_Pop)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'PA'. You can override using the `.groups`\nargument.\n\ndf_prop$AG &lt;- factor(df_prop$AG, levels = c(\n  \"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\",\n  \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\",\n  \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\",\n  \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\"\n))\n\n\nggplot(df_prop, aes(x = reorder(PA, -Proportion), y = Proportion, fill = AG)) +\n  geom_bar(stat = \"identity\", position = \"fill\", width = 0.6) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_manual(values = c(\n    \"0_to_4\" = \"#FFC300\", \"5_to_9\" = \"#FF5733\", \"10_to_14\" = \"#C70039\",\n    \"15_to_19\" = \"#900C3F\", \"20_to_24\" = \"#581845\", \"25_to_29\" = \"#1F618D\",\n    \"30_to_34\" = \"#2874A6\", \"35_to_39\" = \"#2E86C1\", \"40_to_44\" = \"#3498DB\",\n    \"45_to_49\" = \"#52BE80\", \"50_to_54\" = \"#58D68D\", \"55_to_59\" = \"#F4D03F\",\n    \"60_to_64\" = \"#F39C12\", \"65_to_69\" = \"#E67E22\", \"70_to_74\" = \"#DC7633\",\n    \"75_to_79\" = \"#A04000\", \"80_to_84\" = \"#BA4A00\", \"85_to_89\" = \"#6E2C00\",\n    \"90_and_over\" = \"#4A235A\"\n  )) +\n  labs(\n    title = \"Age Group Proportion by Planning Area (2024)\",\n    x = \"Planning Area\", y = \"Proportion\", fill = \"Age Group\"\n  ) +\n  theme_minimal(base_size = 26) +\n  coord_flip() +\n  theme(\n    legend.position = \"top\",\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8)\n  ) +\n  guides(fill = guide_legend(nrow = 2))\n\n\n\n\n\n\n\n\n\ndf_fa &lt;- df_clean %&gt;%\n  group_by(FA) %&gt;%\n  summarise(Total_Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  arrange(desc(Total_Pop))\n\nggplot(df_fa, aes(x = reorder(FA, -Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\",color=\"black\", fill = \"lightblue\", width = 0.5) +\n  geom_text(aes(label = scales::comma(Total_Pop)), vjust = -0.5, size = 3) +\n  scale_y_continuous(expand = c(0, 0)) +\n  labs(\n    title = \"Distribution of Population by Floor Area\",\n    x = \"Floor Area Range (sqm)\",\n    y = \"Total Population\"\n  ) +\n  theme_economist_white(base_size = 26) +\n  theme(\n    plot.margin = margin(10, 10, 0, 10), \n    axis.title.x = element_text(margin = margin(t = 5)),  \n    axis.text.x  = element_text(margin = margin(t = 2), size = 9) \n  )\n\n\n\n\n\n\n\n\n\ndf_ag_sex &lt;- df_clean %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n# Step 2: 設定年齡層順序\ndf_ag_sex$AG &lt;- factor(df_ag_sex$AG, levels = c(\n  \"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\",\n  \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\",\n  \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\",\n  \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\"\n))\n\n# Step 3: 畫圖（含美化）\nggplot(df_ag_sex, aes(x = AG, y = Total_Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8), width = 0.7) +\n  geom_text(aes(label = comma(Total_Pop)),\n            position = position_dodge(width = 0.8),\n            vjust = -0.4, size = 3) +\n  scale_fill_manual(values = c(\"Males\" = \"#4B9CD3\", \"Females\" = \"#F08080\")) +\n  scale_y_continuous(labels = comma, expand = c(0, 0)) +\n  labs(\n    title = \"Population by Age Group and Sex\",\n    x = \"Age Group\", y = \"Total Population\", fill = \"Sex\"\n  ) +\n  theme_minimal(base_size = 26) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(face = \"bold\", size = 14, hjust = 0.5),\n    legend.position = \"top\"\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "3.1 Learning Outcome\nIn this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\nggiraph for making ‘ggplot’ graphics interactive. plotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure. The code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n3.3 Importing Data\n\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\n\n\n\n3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n3.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n\n3.6 Interactivity\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nWarning: Use of `exam_data$tooltip` is discouraged.\nℹ Use `tooltip` instead.\n\n\n\n\n\n\n\n\n3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n3.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(), and by using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n3.8.1 Interactive Data Table: DT package\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n3.9 Reference\n\n\n3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n3.9.2 plotly for R\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Author: “Peng Hsiao Yuan”\n##1.2 Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "Install and launch R packages",
    "text": "Install and launch R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer.\nIf they are, they will be launched into R.\n\npacman::p_load(tidyverse)\ninstall.packages(\"ggplot2\")\n\nWarning: package 'ggplot2' is in use and will not be installed\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-bar-chart",
    "title": "Hands-on Exercise 1",
    "section": "Plotting a simple bar chart",
    "text": "Plotting a simple bar chart\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 10, \n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"lightblue\") +  # &lt;&lt; 沒有空格\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nhist(exam_data$MATHS,\n     col = \"lightblue\",   \n     border = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nNote: A blank canvas appears. ggplot() initializes a ggplot object. The data argument defines the dataset to be used for plotting. If the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\n\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or\napproximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(color = \"black\",\n           fill = \"lightblue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(color = \"black\",\n                 fill = \"lightblue\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"lightblue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") +\n  scale_fill_manual(values = c(\"blue\", \"red\"))\n\n\n\n\n\n\n\n\n\nexam_data &lt;- exam_data %&gt;%\n  mutate(MATHS_GROUP = cut(MATHS, breaks = 10))\n\n# Step 2: 先讓 MATHS_GROUP 依照區間排序\n# 提取 levels 並反轉\nlevels_order &lt;- levels(cut(exam_data$MATHS, breaks = 10))\nlevels_order &lt;- rev(levels_order)  # 反轉順序（高分在上）\n\n# 再重新設定 MATHS_GROUP 為 factor\nexam_data &lt;- exam_data %&gt;%\n  mutate(MATHS_GROUP = factor(MATHS_GROUP, levels = levels_order))\n\n# Step 3: 計算每組男女的人數\npyramid_data &lt;- exam_data %&gt;%\n  group_by(MATHS_GROUP, GENDER) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Step 4: 女性取負\npyramid_data &lt;- pyramid_data %&gt;%\n  mutate(count = ifelse(GENDER == \"Female\", -count, count))\n\n# Step 5: 繪製金字塔圖\nggplot(pyramid_data, aes(x = MATHS_GROUP, y = count, fill = GENDER)) +\n  geom_bar(stat = \"identity\", position = \"identity\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  labs(x = \"MATHS 分數區間\", y = \"人數\", title = \"數學成績金字塔圖\") +\n  scale_fill_manual(values = c(\"green\", \"navy\")) +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric Objects: geom-density()",
    "text": "1.7.6 Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()     \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n       colour = GENDER)) +\n  geom_density(size = 1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot(color = \"black\",\n               fill = \"lightblue\")   \n\n\n\n\n\n\n\n\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE,\n               color = \"black\",\n               fill = \"lightblue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(color = \"black\",\n               fill = \"lightblue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(color = \"black\",\n               fill = \"lightblue\") +                    \n  geom_point(position=\"jitter\", \n             size = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\nfrequency of values of a variable (bar graph) a mean a confidence limit There are two ways to use these functions: add a stat_() function and override the default geom, or add a geom_() function and override the default stat. ## 1.8.1 Working with stat()\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(color = \"black\",\n               fill = \"lightblue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\") +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size= 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\") +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size= 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatter-plot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatter-plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size= 1,\n              color= \"red\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth= 1, \n              color =\"red\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,\n                 color = \"black\",\n                 fill = \"lightblue\") +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,\n                 color = \"black\",\n                 fill = \"lightblue\") +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(color = \"black\",\n                 fill = \"lightblue\")\n\n\n\n\n\n\n\n\nFlipping the Chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(color = \"black\",\n                 fill = \"lightblue\") \n\n\n\n\n\n\n\n  coord_flip()\n\n&lt;ggproto object: Class CoordFlip, CoordCartesian, Coord, gg&gt;\n    aspect: function\n    backtransform_range: function\n    clip: on\n    default: FALSE\n    distance: function\n    expand: TRUE\n    is_free: function\n    is_linear: function\n    labels: function\n    limits: list\n    modify_scales: function\n    range: function\n    render_axis_h: function\n    render_axis_v: function\n    render_bg: function\n    render_fg: function\n    setup_data: function\n    setup_layout: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    setup_params: function\n    train_panel_guides: function\n    transform: function\n    super:  &lt;ggproto object: Class CoordFlip, CoordCartesian, Coord, gg&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=1,\n              color = \"red\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=1,\n              color = \"red\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n&lt;ggproto object: Class CoordCartesian, Coord, gg&gt;\n    aspect: function\n    backtransform_range: function\n    clip: on\n    default: FALSE\n    distance: function\n    expand: TRUE\n    is_free: function\n    is_linear: function\n    labels: function\n    limits: list\n    modify_scales: function\n    range: function\n    render_axis_h: function\n    render_axis_v: function\n    render_bg: function\n    render_fg: function\n    setup_data: function\n    setup_layout: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    setup_params: function\n    train_panel_guides: function\n    transform: function\n    super:  &lt;ggproto object: Class CoordCartesian, Coord, gg&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\nA horizontal bar chart plotted using theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(color = \"black\",\n           fill = \"lightblue\") +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(color = \"black\",\n                 fill = \"light blue\") +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Author: “Peng Hsiao Yuan”\n##2 Beyond ggplot2 Fundamentals\nInstall and launch R packages\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "2.1 Overview",
    "text": "2.1 Overview\nIn this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package, create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages, plot composite figure by combining ggplot2 graphs by using patchwork package. ## 2.2 Getting started ## 2.2.1 Installing and loading the required libraries In this exercise, beside tidyverse, four R packages will be used. They are:\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels. ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’. hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2. patchwork: an R package for preparing composite figure created using ggplot2.\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\ninstall.packages(c(\"ggrepel\", \"ggthemes\", \"hrbrthemes\", \"patchwork\"))\n\nWarning: packages 'ggrepel', 'ggthemes', 'hrbrthemes', 'patchwork' are in use\nand will not be installed"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n    coord_fixed(ratio = 1, \n                xlim = c(0, 100), \n                ylim = c(0, 100)) +\n    theme_economist_white(base_size = 13)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n$title\n[1] \"English scores versus Maths scores for Primary 3\"\n\nattr(,\"class\")\n[1] \"labels\""
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              color= \"red\",\n              size=1) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 219 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"darkgray\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nNote: 1. axis_title_size argument is used to increase the font size of the axis title to 18, 2. base_size argument is used to increase the default axis label to 15, and grid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\nNext\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"lightblue\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nLastly, we will draw a scatter plot for English score versus Maths score by as shown below\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              color = \"red\",\n              size=1) +  \n    coord_fixed(ratio = 1, xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\nTwo-Column Layout using the Plus Sign +. Parenthesis () to create a subplot group. Two-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n“/” operator to stack two ggplot2 graphs, “|” operator to place the plots beside each other, “()” operator the define the sequence of the plotting.\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n##2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj(base_size = 12)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS 608 Visual Analytics and Applications. In this website, you will see my coursework on this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#grouping",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#grouping",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "3.1 Grouping",
    "text": "3.1 Grouping\n\ndf &lt;- tibble(\n  Children = c(\"0-14\"),\n  Adults = c(\"15-64\"),\n  Seniors = c(\"Above 65\"),\n)\n\ndf %&gt;%\n  knitr::kable(caption = \"Column Information\") %&gt;%\n  kableExtra::kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"bordered\"),\n    full_width = FALSE\n  )\n\n\nColumn Information\n\n\nChildren\nAdults\nSeniors\n\n\n\n\n0-14\n15-64\nAbove 65"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-distributions-of-subzones-by-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-distributions-of-subzones-by-planning-area",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "3 The Distributions of Subzones by Planning Area",
    "text": "3 The Distributions of Subzones by Planning Area\n\nlibrary(tidyverse)\n\n# 1. 先從清理後的 df_clean 抽出有意義的 PA–SZ\ndf_sz_count &lt;- df_clean %&gt;%\n  filter(!is.na(SZ) & SZ != \"\") %&gt;%      \n  distinct(PA, SZ) %&gt;%                  \n  count(PA, name = \"SZ_count\") %&gt;%      \n  arrange(desc(SZ_count))               \n\n# 2. 畫圖\nggplot(df_sz_count, aes(\n    x    = reorder(PA, -SZ_count),     # 按 SZ_count 做降冪排序\n    y    = SZ_count\n  )) +\n  geom_col(fill = \"lightblue\", colour = \"black\", width = 0.5) +\n  coord_flip() +\n  labs(\n    title = \"The Distributions Numbers of Subzone by Planning Area\",\n    x     = \"PA\",\n    y     = \"Numbers of Subzone\"\n  ) +\n  theme_minimal(base_size = 16) +\n  theme(\n    axis.text.x = element_text(angle = 0, size = 30),\n    axis.text.y = element_text(size = 20)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-information-and-data-source",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-information-and-data-source",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "1.1 Background Information and Data Source",
    "text": "1.1 Background Information and Data Source\nThe data set is downloaded from “https://www.singstat.gov.sg/”\nFile Name: “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-processing",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "1.2 Data Processing",
    "text": "1.2 Data Processing\nImporting Data and Install Packages\n\necho = FALSE\npacman::p_load(\n  tidyverse, haven, knitr,\n  patchwork, ggthemes, scales,\n  ggridges, ggpubr, gganimate,\n  ggdist, ggtext, ggalt,\n  cowplot, ggnewscale,\n  sf, viridis\n)\n\nLoading and Installing Packages"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#read-the-file-and-clean-bom",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#read-the-file-and-clean-bom",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "1.3Read the file and Clean BOM",
    "text": "1.3Read the file and Clean BOM\n\nraw_lines &lt;- readLines(\"respopagesex2024/respopagesex2024.csv\", encoding = \"UTF-8\")\nwriteLines(raw_lines, \"respopagesex2024/respopagesex2024_clean.csv\", useBytes = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#read-the-clean-file",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#read-the-clean-file",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "1.4 Read the Clean File",
    "text": "1.4 Read the Clean File\n\necho = FALSE\ndf &lt;- read_csv(\"respopagesex2024/respopagesex2024_clean.csv\",  skip_empty_rows = TRUE)\n\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf &lt;- df %&gt;%\n  mutate(\n    Age = suppressWarnings(as.numeric(Age)),\n    Pop = suppressWarnings(as.numeric(Pop))\n  )\n\ndf_clean &lt;- df %&gt;%\n  filter(!is.na(Pop) & !is.na(Age))\nshow_col_types = FALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-distributions-by-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-distributions-by-planning-area",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "2. Population Distributions by Planning Area",
    "text": "2. Population Distributions by Planning Area\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\ndf &lt;- tibble(\n  PA = c(\"Planning Area\"),\n  SZ = c(\"Subzone\"),\n  Age = c(\"Age\"),\n  Sex = c(\"Sex\"),\n  Pop = c(\"Population\"),\n  Time = c(\"Time\")\n)\n\ndf %&gt;%\n  knitr::kable(caption = \"Column Information\") %&gt;%\n  kableExtra::kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"bordered\"),\n    full_width = FALSE\n  )\n\n\nColumn Information\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\n\n\n\n\nPlanning Area\nSubzone\nAge\nSex\nPopulation\nTime"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task-objective",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task-objective",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "2.1 Task Objective",
    "text": "2.1 Task Objective\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualizations for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "2.2 Data Preparation",
    "text": "2.2 Data Preparation\n\ndf_summary &lt;- df_clean %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(Total_Pop))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-the-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-the-graph",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "2.3 Plot the Graph",
    "text": "2.3 Plot the Graph\nThe code below plots the distributions of population.\nX: Planning area\nY: Total population by area in 2024\n\nbottom10_pa &lt;- df_summary %&gt;%\n  slice_min(Total_Pop, n = 10) %&gt;%\n  pull(PA)\n\ndf_summary_filtered &lt;- df_summary %&gt;%\n  filter(!PA %in% bottom10_pa)\n\nggplot(df_summary_filtered, aes(x = reorder(PA, -Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"lightblue\", width = 0.75) +\n  scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +  \n  labs(\n    x = \"Planning Area\",\n    y = \"Total Population\",\n    title = \"Total Population by Planning Area (2024)\"\n  ) +\n  theme_classic(base_size = 26) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-processing-and-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-processing-and-cleaning",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "3.2 Data Processing and Cleaning",
    "text": "3.2 Data Processing and Cleaning\n\ndf_clean &lt;- df_clean %&gt;%\n  mutate(AgeGroup = case_when(\n    Age_raw == \"90_and_Over\"    ~ \"Seniors\",      \n    Age &gt;= 0  & Age &lt;= 14       ~ \"Children\",\n    Age &gt;= 15 & Age &lt;= 64       ~ \"Adults\",\n    Age &gt;= 65                   ~ \"Seniors\",\n    TRUE                        ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(AgeGroup))                     \n\ndf_percent &lt;- df_clean %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(\n    Total_Pop = sum(Pop),\n    Percent   = Pop / Total_Pop * 100\n  ) %&gt;%\n  filter(Percent &gt; 0)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-the-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-the-graph",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "3.3 Plotting the Graph",
    "text": "3.3 Plotting the Graph\n\nggplot(df_percent, aes(\n    x    = reorder(PA, -Total_Pop),\n    y    = Percent,\n    fill = AgeGroup\n  )) +\n  geom_bar(stat = \"identity\",\n           position = \"stack\",\n           width = 0.5,\n           color = \"black\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  scale_fill_manual(\n    values = c(\"Children\" = \"lightblue\", \"Adults\" = \"lightgray\", \"Seniors\" = \"navy\")\n  ) +\n  labs(\n    title = \"Age Structure by Planning Area\",\n    x     = \"Planning Area\",\n    y     = \"Ratio\",\n    fill  = \"Age Group\"\n  ) +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis\nThe bar chart above suggests that Tampines are the most populated area according to the survey. This outcome also indicates that the outskirt area such as Tampines, Bedok, Jurong West and Woodlands are among the most populated residential area. This could be attributed to the higher rent in the central area, convenient public transportation nationwide or greener environment.\nAs a media company, the marketing department is able to allocate more resources on advertisement on the area which has higher population density. By analyzing population of each planning area and the resources invested in that area, companies are able to evaluate the KPI of the advertisement to further adjust the strategies.\n##3.The Generation Strucutre Ratio by Planning Area\n\nlibrary(tidyverse)\n\ndf &lt;- read_csv(\"respopagesex2024/respopagesex2024_clean.csv\",\n               skip_empty_rows = TRUE,\n               show_col_types = FALSE) %&gt;%\n  rename(Age_raw = Age) %&gt;%                      \n  mutate(\n    Age = suppressWarnings(as.numeric(Age_raw)), \n    Pop = suppressWarnings(as.numeric(Pop))\n  )\n\ndf_clean &lt;- df %&gt;%\n  filter(!is.na(Pop))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis-1",
    "title": "Take-home Exercise 1 - Data Visualizations in Singapore Residence by Planning Area",
    "section": "3.4 Analysis",
    "text": "3.4 Analysis\nBy analyzing the population structures of a specific area, media companies are able to advertise the products or the service according to the age distributions. By targeting the majority generation of a specific area, tha advertisements are more likely to reach it’s target customer, further improving the KPI of the expenses.If done properly, the advertisement could enhance the sales of a products significantly."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#background-information-and-data-source",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#background-information-and-data-source",
    "title": "Take-home_Ex01_Part2",
    "section": "1.1 Background Information and Data Source",
    "text": "1.1 Background Information and Data Source\nThe data set is downloaded from “https://www.singstat.gov.sg/”\nFile Name: “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#data-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#data-processing",
    "title": "Take-home_Ex01_Part2",
    "section": "1.2 Data Processing",
    "text": "1.2 Data Processing\nImporting Data and Install Packages\n\necho = FALSE\npacman::p_load(\n  tidyverse, haven, knitr,\n  patchwork, ggthemes, scales,\n  ggridges, ggpubr, gganimate,\n  ggdist, ggtext, ggalt,\n  cowplot, ggnewscale,\n  sf, viridis\n)\n\nLoading and Installing Packages"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#read-the-file-and-clean-bom",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#read-the-file-and-clean-bom",
    "title": "Take-home_Ex01_Part2",
    "section": "1.3Read the file and Clean BOM",
    "text": "1.3Read the file and Clean BOM\n\nraw_lines &lt;- readLines(\"respopagesex2024/respopagesex2024.csv\", encoding = \"UTF-8\")\nwriteLines(raw_lines, \"respopagesex2024/respopagesex2024_clean.csv\", useBytes = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#read-the-clean-file",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#read-the-clean-file",
    "title": "Take-home_Ex01_Part2",
    "section": "1.4 Read the Clean File",
    "text": "1.4 Read the Clean File\n\necho = FALSE\ndf &lt;- read_csv(\"respopagesex2024/respopagesex2024_clean.csv\",  skip_empty_rows = TRUE)\n\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf &lt;- df %&gt;%\n  mutate(\n    Age = suppressWarnings(as.numeric(Age)),\n    Pop = suppressWarnings(as.numeric(Pop))\n  )\n\ndf_clean &lt;- df %&gt;%\n  filter(!is.na(Pop) & !is.na(Age))\nshow_col_types = FALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#population-distributions-by-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#population-distributions-by-planning-area",
    "title": "Take-home_Ex01_Part2",
    "section": "2. Population Distributions by Planning Area",
    "text": "2. Population Distributions by Planning Area\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\ndf &lt;- tibble(\n  PA = c(\"Planning Area\"),\n  SZ = c(\"Subzone\"),\n  Age = c(\"Age\"),\n  Sex = c(\"Sex\"),\n  Pop = c(\"Population\"),\n  Time = c(\"Time\")\n)\n\ndf %&gt;%\n  knitr::kable(caption = \"Column Information\") %&gt;%\n  kableExtra::kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"bordered\"),\n    full_width = FALSE\n  )\n\n\nColumn Information\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\n\n\n\n\nPlanning Area\nSubzone\nAge\nSex\nPopulation\nTime"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#task-objective",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#task-objective",
    "title": "Take-home_Ex01_Part2",
    "section": "2.1 Task Objective",
    "text": "2.1 Task Objective\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualizations for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#data-preparation",
    "title": "Take-home_Ex01_Part2",
    "section": "2.2 Data Preparation",
    "text": "2.2 Data Preparation\n\ndf_summary &lt;- df_clean %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(Total_Pop))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#plot-the-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#plot-the-graph",
    "title": "Take-home_Ex01_Part2",
    "section": "2.3 Plot the Graph",
    "text": "2.3 Plot the Graph\nThe code below plots the distributions of population.\nX: Planning area\nY: Total population by area in 2024\n\nbottom10_pa &lt;- df_summary %&gt;%\n  slice_min(Total_Pop, n = 10) %&gt;%\n  pull(PA)\n\ndf_summary_filtered &lt;- df_summary %&gt;%\n  filter(!PA %in% bottom10_pa)\n\nggplot(df_summary_filtered, aes(x = reorder(PA, -Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"lightblue\", width = 0.75) +\n  scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +  \n  labs(\n    x = \"Planning Area\",\n    y = \"Total Population\",\n    title = \"Total Population by Planning Area (2024)\"\n  ) +\n  theme_classic(base_size = 26) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#analysis",
    "title": "Take-home_Ex01_Part2",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis\nThe bar chart above suggests that Tampines are the most populated area according to the survey. This outcome also indicates that the outskirt area such as Tampines, Bedok, Jurong West and Woodlands are among the most populated residential area. This could be attributed to the higher rent in the central area, convenient public transportation nationwide or greener environment.\nAs a media company, the marketing department is able to allocate more resources on advertisement on the area which has higher population density. By analyzing population of each planning area and the resources invested in that area, companies are able to evaluate the KPI of the advertisement to further adjust the strategies.\n##3.The Generation Strucutre Ratio by Planning Area\n\nlibrary(tidyverse)\n\ndf &lt;- read_csv(\"respopagesex2024/respopagesex2024_clean.csv\",\n               skip_empty_rows = TRUE,\n               show_col_types = FALSE) %&gt;%\n  rename(Age_raw = Age) %&gt;%                      \n  mutate(\n    Age = suppressWarnings(as.numeric(Age_raw)), \n    Pop = suppressWarnings(as.numeric(Pop))\n  )\n\ndf_clean &lt;- df %&gt;%\n  filter(!is.na(Pop))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#grouping",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#grouping",
    "title": "Take-home_Ex01_Part2",
    "section": "3.1 Grouping",
    "text": "3.1 Grouping\n\ndf &lt;- tibble(\n  Children = c(\"0-14\"),\n  Adults = c(\"15-64\"),\n  Seniors = c(\"Above 65\"),\n)\n\ndf %&gt;%\n  knitr::kable(caption = \"Column Information\") %&gt;%\n  kableExtra::kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"bordered\"),\n    full_width = FALSE\n  )\n\n\nColumn Information\n\n\nChildren\nAdults\nSeniors\n\n\n\n\n0-14\n15-64\nAbove 65"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#data-processing-and-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#data-processing-and-cleaning",
    "title": "Take-home_Ex01_Part2",
    "section": "3.2 Data Processing and Cleaning",
    "text": "3.2 Data Processing and Cleaning\n\ndf_clean &lt;- df_clean %&gt;%\n  mutate(AgeGroup = case_when(\n    Age_raw == \"90_and_Over\"    ~ \"Seniors\",      \n    Age &gt;= 0  & Age &lt;= 14       ~ \"Children\",\n    Age &gt;= 15 & Age &lt;= 64       ~ \"Adults\",\n    Age &gt;= 65                   ~ \"Seniors\",\n    TRUE                        ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(AgeGroup))                     \n\ndf_percent &lt;- df_clean %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(\n    Total_Pop = sum(Pop),\n    Percent   = Pop / Total_Pop * 100\n  ) %&gt;%\n  filter(Percent &gt; 0)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#plotting-the-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#plotting-the-graph",
    "title": "Take-home_Ex01_Part2",
    "section": "3.3 Plotting the Graph",
    "text": "3.3 Plotting the Graph\n\nggplot(df_percent, aes(\n    x    = reorder(PA, -Total_Pop),\n    y    = Percent,\n    fill = AgeGroup\n  )) +\n  geom_bar(stat = \"identity\",\n           position = \"stack\",\n           width = 0.5,\n           color = \"black\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  scale_fill_manual(\n    values = c(\"Children\" = \"lightblue\", \"Adults\" = \"lightgray\", \"Seniors\" = \"navy\")\n  ) +\n  labs(\n    title = \"Age Structure by Planning Area\",\n    x     = \"Planning Area\",\n    y     = \"Ratio\",\n    fill  = \"Age Group\"\n  ) +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#analysis-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part1.html#analysis-1",
    "title": "Take-home_Ex01_Part2",
    "section": "3.4 Analysis",
    "text": "3.4 Analysis\nBy analyzing the population structures of a specific area, media companies are able to advertise the products or the service according to the age distributions. By targeting the majority generation of a specific area, tha advertisements are more likely to reach it’s target customer, further improving the KPI of the expenses.If done properly, the advertisement could enhance the sales of a products significantly."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_Part2.html",
    "title": "Take-home_Ex01_Part2",
    "section": "",
    "text": "Reference Source: https://isss608-ay2025t2.netlify.app/take-home_ex/take-home_ex01/take-home_ex01\nStudents Name: FU YILIN\n\npacman::p_load(tidyverse, ggplot2, dplyr, forcats, ggthemes, patchwork, knitr, gt)\n\n\ndata &lt;- read_csv(\"respopagesex2024/respopagesex2024.csv\") %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  drop_na(Age)\n\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nData Visualization 1\n\npyramid_data &lt;- data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\npyramid_plot &lt;- ggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  labs(title = \"Singapore Resident Population Pyramid (2024)\",\n       x = \"Age\", y = \"Population\") +\n  theme_minimal()\n\npyramid_plot\n\n\n\n\n\n\n\n\n\n\nComment 1:\nThe width of the bars are too thin to distinguish the counterside of the other gender. If the number of the bars can be reduced, the graph will be more clear and easier to compare between genders.\n\n\nImprovement 1:\n\nlibrary(tidyverse)\ndata_binned &lt;- data %&gt;%\n  mutate(\n    age_group = cut(\n      Age,\n      breaks = seq(0, 100, by = 5),\n      right = FALSE,\n      labels = paste0(seq(0, 95, by = 5), \"-\", seq(4, 99, by = 5))\n    ),\n    age_group = factor(age_group, levels = paste0(seq(0, 95, by = 5), \"-\", seq(4, 99, by = 5)))\n  )\npyramid_data &lt;- data_binned %&gt;%\n  group_by(age_group, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\nggplot(pyramid_data, aes(x = age_group, y = Pop, fill = Sex)) +\n  geom_col(width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  labs(\n    title = \"Singapore Resident Population Pyramid (2024)\",\n    x = \"Age Group\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 8),\n    axis.text.x = element_text(size = 8)\n  )\n\n\n\n\n\n\n\n\n\n\nData Visualization 2\n\nage_groups &lt;- data %&gt;%\n  filter(Age &lt;= 14 | Age &gt;= 65) %&gt;%\n  mutate(group = case_when(\n    Age &lt;= 14 ~ \"Young\",\n    Age &gt;= 65 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\n\nggplot(age_groups, aes(x = reorder(PA, -total_pop), y = total_pop, fill = group)) +\n  geom_col(position = \"dodge\") +\n  coord_flip() +\n  labs(title = \"Young vs Aging Population by Planning Area\",\n       x = \"Planning Area\", y = \"Population\", fill = \"Age Group\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nComment2:\nFirst of all, there are lots of data have no values in the graph. It will make the graoh overall more inormation-focused my removing the empty part. Secondly, the color of two age groups should be more contrast and the space between genders should be wider as we can see it is difficult distinguish the age group.\n\n\nImprovement 2\n\nggplot(age_groups, aes(x = reorder(PA, -total_pop), y = total_pop, fill = group)) +\n  geom_col(\n    position = position_dodge(width = 0.8),\n    width = 0.6\n  ) +\n  scale_fill_manual(\n    values = c(\n      Young = \"blue\",\n      Aging = \"salmon\"\n    )\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Young vs Aging Population by Planning Area\",\n    x     = \"Planning Area\",\n    y     = \"Population\",\n    fill  = \"Age Group\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nData Visualization 3\n\ntop_pa &lt;- age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  slice_head(n = 20)  # select top 20\n\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA)\n\n# Define the order (e.g. by total population descending)\npa_order &lt;- top_age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  pull(PA)\n\n# Apply the same factor levels\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%  # Remove NAs\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Top bar chart\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = fct_rev(PA), fill = group)) +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Population\", y = NULL, fill = \"Age Group\") +\n  theme_minimal()\n\n# Bottom line chart with consistent PA order\nline_plot &lt;- ggplot(ratio_data, aes(x = PA, y = ratio)) +\n  geom_point(size = 3, color = \"black\") +\n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = \"Planning Area\", y = \"Aging / Young Ratio\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Combine them\n(bar_plot / line_plot) + plot_layout(heights = c(2, 1)) +\n  plot_annotation(title = \"Population Distribution and Aging Ratio by Planning Area\")\n\n\n\n\n\n\n\n\n\n\nComment 3\nThe bar chart is pretty clear and have no redundant categories. Besides, the design clearly show the total population by descending orders, illustrating the popularity of the area. But the color and the range between different areas still can be wider to be more easy to read. Also, The usage of the line chart is not very proper since the ratio is not illustrating the trend over a period of time.\n\n\nImprovement 3\n\nlibrary(tidyverse)\nlibrary(patchwork)\n\ntop_pa &lt;- age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  slice_head(n = 20)\n\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA)\n\npa_order &lt;- top_age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  pull(PA)\n\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = fct_rev(PA), fill = group)) +\n  geom_col(\n    position = position_dodge(width = 1.2),   \n    width = 0.7                               \n  ) +\n  scale_fill_manual(\n    values = c(\n      Young = \"#1f78b4\",  \n      Aging = \"#e31a1c\"   \n    )\n  ) +\n  labs(x = \"Population\", y = NULL, fill = \"Age Group\") +\n  theme_minimal()\n\nratio_plot &lt;- ggplot(ratio_data, aes(x = ratio, y = fct_rev(PA))) +\n  geom_col(\n    fill = \"#33a02c\",   \n    position = position_dodge(width = 1.5),\n    width = 0.6\n  ) +\n  labs(x = \"Aging / Young Ratio\", y = NULL) +\n  theme_minimal()\n\n(bar_plot / ratio_plot) +\n  plot_layout(heights = c(2, 1)) +\n  plot_annotation(title = \"Population Distribution and Aging Ratio by Planning Area\")\n\n\n\n\n\n\n\n\n\n\nData Visualization 4\n\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    # Core Central Region\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region\",\n    \n    # Rest of Central Region\n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region\",\n    \n    # North Region\n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region\",\n    \n    # North-East Region\n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n              \"Sengkang\", \"Serangoon\") ~ \"North-East Region\",\n    \n    # East Region\n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region\",\n    \n    # West Region\n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop)\n  \np1 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_boxplot() +\n  labs(title = \"Age Distribution by Region Type\", x = \"Region\", y = \"Age\") +\n  theme_minimal() +\n  coord_flip()\n\np2 &lt;- ggplot(expanded_data, aes(x = Age, y = fct_reorder(PA, Age), fill = region_type)) +\n  geom_boxplot() +\n  facet_wrap(~ region_type, scales = \"free_y\") +\n  labs(\n    title = \"Age Distribution by Planning Area and Region\",\n    x = \"Age\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal()\n\np1 / p2 +\n  plot_annotation(title = \"Overview: Regional and Planning Area Age Distribution\")\n\n\n\n\n\n\n\n\n\n\nComment 4\nThe combination of the box plot clearly illustrates the sge strucutre of each region. The color of each box plot are akso pretty contrast to better tell the difference among regions. However, the font zise of the graph are too small to read since the size of the box plot is so much greater than the font.\n\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    # Core Central Region\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region\",\n    \n    # Rest of Central Region\n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region\",\n    \n    # North Region\n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region\",\n    \n    # North-East Region\n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n              \"Sengkang\", \"Serangoon\") ~ \"North-East Region\",\n    \n    # East Region\n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region\",\n    \n    # West Region\n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop)\n  \np1 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_boxplot() +\n  labs(title = \"Age Distribution by Region Type\", x = \"Region\", y = \"Age\") +\n  theme_minimal() +\n  coord_flip()\n\np2 &lt;- ggplot(expanded_data, aes(x = Age, y = fct_reorder(PA, Age), fill = region_type)) +\n  geom_boxplot() +\n  facet_wrap(~ region_type, scales = \"free_y\") +\n  labs(\n    title = \"Age Distribution by Planning Area and Region\",\n    x = \"Age\",\n    y = \"Planning Area\"\n    \n  ) +\n  theme_minimal()\n\np1 / p2 +\n  plot_annotation(title = \"Overview: Regional and Planning Area Age Distribution\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#note",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#note",
    "title": "Hands-on_Ex04",
    "section": "Note:",
    "text": "Note:\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "title": "Hands-on_Ex04",
    "section": "Reference",
    "text": "Reference\nIntroducing Ridgeline Plots (formerly Joyplots) Claus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10. Allen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63. Dots + interval stats and geoms"
  }
]