[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "In this part , I would like to show how the other genre of music is affect by one another. Hence, I want to create a drop down table to select a genre of music, which will be the center of the network graph while hte others will be shown around the selected genre.\n\n\n\n\nBefore looking into how the other genre of music musics are influenced by Oceanus Folk, we have to define what are the influences there are. In this scenario, we defined “CoverOf”. InStyleOf”, DirectlySamples”, “InterprlatesFrom” and “LyricsReferenceTo” as the types of influences we are looking for.\n\n\n\nWhenever we choose a genre aof music, we have to filter the music that are influenced by that type of genre of music but does not belongs to the genre itself.\n\n\n\nTo further look into the genre that is influenced by specific genre of music, we have to extract the genre of music of the filtered data to analyze the data.\n\n\n\n\n\n\n\n\n\nHow selected genre of music influence one another based on the statistics\n\n\n\n\n\n\nIn this section, we want to analyze how the production style had been reshaped by the rise of Sailor Shift. In this case, we analyze the number of everykind of edges related to the productions.\n\n\nTo evaluate the trend of relation, we defined the relation include “ ”LyricistOf”, “RecordedBy”, “DistributedBy”, “InStyleOf”, “InterpolatesFrom”, “CoverOf”,\n“LyricalReferenceTo” and “DirectlySamples”"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#tab-1---how-genre-of-music-affects-one-another",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#tab-1---how-genre-of-music-affects-one-another",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "Before looking into how the other genre of music musics are influenced by Oceanus Folk, we have to define what are the influences there are. In this scenario, we defined “CoverOf”. InStyleOf”, DirectlySamples”, “InterprlatesFrom” and “LyricsReferenceTo” as the types of influences we are looking for.\n\n\n\nWhenever we choose a genre aof music, we have to filter the music that are influenced by that type of genre of music but does not belongs to the genre itself.\n\n\n\nTo further look into the genre that is influenced by specific genre of music, we have to extract the genre of music of the filtered data to analyze the data.\n\n\n\n\n\n\n\n\n\nHow selected genre of music influence one another based on the statistics"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#tab-2---how-had-the-changes-of-oceanus-folk-brought-changes-to-the-music-industries",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#tab-2---how-had-the-changes-of-oceanus-folk-brought-changes-to-the-music-industries",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "In this section, we want to analyze how the production style had been reshaped by the rise of Sailor Shift. In this case, we analyze the number of everykind of edges related to the productions.\n\n\nTo evaluate the trend of relation, we defined the relation include “ ”LyricistOf”, “RecordedBy”, “DistributedBy”, “InStyleOf”, “InterpolatesFrom”, “CoverOf”,\n“LyricalReferenceTo” and “DirectlySamples”"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS 608 Visual Analytics and Applications. In this website, you will see my coursework on this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph,ggraph, igraph, lubridate, ggimage)\n\n\n\n\n# Read JSON file\nmc1_data &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\nstr(mc1_data, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\nglimpse(mc1_data)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame': 37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(mc1_data$nodes)\nedges_tbl &lt;- as_tibble(mc1_data$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) + \n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#read-the-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#read-the-data",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "# Read JSON file\nmc1_data &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\nstr(mc1_data, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\nglimpse(mc1_data)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame': 37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-and-inspect",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-and-inspect",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "nodes_tbl &lt;- as_tibble(mc1_data$nodes)\nedges_tbl &lt;- as_tibble(mc1_data$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "ggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) + \n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-1.-mapping-from-node-id-to-row-index",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-1.-mapping-from-node-id-to-row-index",
    "title": "Take-home_Ex02",
    "section": "Step 1. Mapping from node id to row index",
    "text": "Step 1. Mapping from node id to row index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures each id from your node list is mapped to the correct row number."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-2.-map-source-and-target-ids-to-row-indices",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-2.-map-source-and-target-ids-to-row-indices",
    "title": "Take-home_Ex02",
    "section": "Step 2. Map Source and target IDs to row indices",
    "text": "Step 2. Map Source and target IDs to row indices\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-3.-remove-na",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-3.-remove-na",
    "title": "Take-home_Ex02",
    "section": "Step 3. Remove N/A",
    "text": "Step 3. Remove N/A\n\nedges_tbl &lt;- edges_tbl %&gt;%\n filter(!is.na(from), !is.na(to))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-4.-creating-the-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-4.-creating-the-graph",
    "title": "Take-home_Ex02",
    "section": "Step 4. Creating the graph",
    "text": "Step 4. Creating the graph\nLastly, tbl_graph is used to create tidygraph’s graph object by using the code chunk below\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = mc1_data$directed)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-5.-visualizing-the-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-5.-visualizing-the-knowledge-graph",
    "title": "Take-home_Ex02",
    "section": "Step 5. Visualizing the knowledge graph",
    "text": "Step 5. Visualizing the knowledge graph\n\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-1-filter-edges-to-only-memberof",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-1-filter-edges-to-only-memberof",
    "title": "Take-home_Ex02",
    "section": "Step 1: Filter edges to only “Memberof”",
    "text": "Step 1: Filter edges to only “Memberof”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-2-extract-only-connected-nodesi.e.-used-in-thesee-edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-2-extract-only-connected-nodesi.e.-used-in-thesee-edges",
    "title": "Take-home_Ex02",
    "section": "Step 2: Extract only connected nodes(i.e., used in thesee edges)",
    "text": "Step 2: Extract only connected nodes(i.e., used in thesee edges)\n\nused_nodes_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-3-keep-only-those-nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#step-3-keep-only-those-nodes",
    "title": "Take-home_Ex02",
    "section": "Step 3: Keep only those nodes",
    "text": "Step 3: Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_nodes_indices) %&gt;%\n  select(-row_id)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-the-sub-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-the-sub-graph",
    "title": "Take-home_Ex02",
    "section": "Plot the sub-graph",
    "text": "Plot the sub-graph\n\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\nWarning: ggrepel: 789 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-popularity-of-oceanus-folk-songs",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-popularity-of-oceanus-folk-songs",
    "title": "Take-home_Ex02",
    "section": "4.1 visualizing the popularity of Oceanus Folk songs",
    "text": "4.1 visualizing the popularity of Oceanus Folk songs\nIn this section, we are going to visualize the popularity of Oceanus Folk’s popularity by plotting the numbers of Oceanus Folk’s songs hitting the top chart.\n\n4.1.1 Setting up annual statistics of the numbers of Oceanus Folk songs on the top chart\n\ndf &lt;- nodes_tbl %&gt;%\n  filter(\n    `Node Type` == \"Song\",\n    genre        == \"Oceanus Folk\",\n    !is.na(release_date),\n    release_date != \"\"\n  ) %&gt;%\n  mutate(year = as.integer(release_date)) %&gt;%\n  filter(year &gt; 2018, year &lt; 2030) %&gt;%\n  group_by(year) %&gt;%\n  summarise(\n    total   = n(),\n    notable = sum(notable, na.rm = TRUE),\n    ratio   = notable / total,\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(year)\n\n\n\n4.1.2 Plotting the graph\n\ndf_ratio &lt;- nodes_tbl %&gt;%\n  filter(\n    `Node Type` == \"Song\",\n    genre        == \"Oceanus Folk\",\n    !is.na(release_date),\n    release_date != \"\"\n  ) %&gt;%\n  mutate(year = as.integer(release_date)) %&gt;%\n  filter(year &gt;= 2019, year &lt;= 2029) %&gt;%\n  group_by(year) %&gt;%\n  summarise(\n    total   = n(),\n    notable = sum(notable, na.rm = TRUE),\n    ratio   = notable / total,\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(year)\n\n# ── 2) df_counts: total Oceanus-Folk releases per year ─────────────────────\ndf_counts &lt;- df_ratio %&gt;%\n  transmute(year, n_releases = total)\n\n# ── 3) Plot Panels A & C ─────────────────────────────────────────────────\n\n# Panel A: Genre success rate\np1 &lt;- ggplot(df_ratio, aes(x = year, y = ratio)) +\n  geom_line(size = 1.2, color = \"steelblue\") +\n  geom_point(size = 3, color = \"steelblue\") +\n  scale_y_continuous(\"Top-chart %\", labels = scales::percent_format(accuracy = 1)) +\n  scale_x_continuous(\"Year\", breaks = df_ratio$year) +\n  labs(title = \"A. % of Oceanus Folk Songs Hitting Top Chart\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n# Panel C: Total release volume\np3 &lt;- ggplot(df_counts, aes(x = year, y = n_releases)) +\n  geom_col(fill = \"gray80\") +\n  scale_y_continuous(\"Number of Releases\") +\n  scale_x_continuous(\"Year\", breaks = df_counts$year) +\n  labs(title = \"C. Oceanus Folk: Release Volume\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# ── 4) Combine panels vertically ──────────────────────────────────────────\nlibrary(patchwork)\n\n(p1 / p3) +\n  plot_annotation(\n    title    = \"Oceanus Folk: Genre Success vs. Release Volume (2019–2029)\",\n    subtitle = \"Panel A: Top-chart %  •  Panel C: Total release volume\"\n  )\n\n\n\n\n\n\n\n\nPerfect scores are fragile once the catalogue grows. – The genre maintained 100 % only while releases were scarce or strongly branded (early years, Ivy Echoes peak, curated 2027 wave).\nSailor’s presence is the single biggest swing factor. – When she pivots away (2028), the hit-rate collapses even though release volume is ordinary. – When she leads collaborations (2029) or headlines group projects (2023, 2026-27), success rates soar.\nVolume alone doesn’t guarantee chart impact. – 2023 and 2026 had similar release surges, yet the hit-rate diverged (100 % vs ~86 %) depending on unified branding vs. fragmented efforts.\nStrategic collaborations rejuvenate the scene. – The 2029 rebound aligns exactly with Sailor’s Roots & Tides initiative, confirming that leveraging star power to spotlight newcomers can lift an entire genre.\nBottom line: the data reinforce the article’s narrative that Oceanus Folk’s fortunes rise and fall with Sailor Shift’s artistic choices—especially her willingness to keep one foot in her roots while experimenting globally."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-trend-of-popularity-of-oceanus-folk.",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-trend-of-popularity-of-oceanus-folk.",
    "title": "Take-home_Ex02",
    "section": "4.2 Visualizing the trend of popularity of Oceanus Folk.",
    "text": "4.2 Visualizing the trend of popularity of Oceanus Folk.\n\n4.2.1 Data Preparations - Naming the edges\n\nedges2 &lt;- edges_tbl %&gt;%\n  rename(rel_type = `Edge Type`)\n\n\n\n4.2.2 Filtering and Extracting the Data\n\noceanus_edges &lt;- edges2 %&gt;%\n  semi_join(\n    nodes_tbl %&gt;% filter(genre == \"Oceanus Folk\") %&gt;% select(id),\n    by = c(\"target\" = \"id\")\n  ) %&gt;%\n  filter(rel_type %in% c(\"ComposerOf\", \"PerformerOf\", \"ProducerOf\"))\n\ndf_yearly &lt;- oceanus_edges %&gt;%\n  left_join(\n    nodes_tbl %&gt;% select(id, release_date),\n    by = c(\"target\" = \"id\")\n  ) %&gt;%\n  mutate(\n    year = str_extract(release_date, \"^\\\\d{4}\") %&gt;% as.integer()\n  ) %&gt;%\n  filter(year &gt;= 2022) %&gt;%\n\n  group_by(year, rel_type) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(\n    names_from  = rel_type,\n    values_from = count,\n    values_fill = 0\n  ) %&gt;%\n    arrange(year)\n\n\n\n4.2.3 The data table\n\ndf_yearly\n\n# A tibble: 18 × 4\n    year ComposerOf PerformerOf ProducerOf\n   &lt;int&gt;      &lt;int&gt;       &lt;int&gt;      &lt;int&gt;\n 1  2022          3          17          5\n 2  2023         22         130         26\n 3  2024         14          33          8\n 4  2025          5          36          5\n 5  2026         18          69         16\n 6  2027          6          14          2\n 7  2028          6          15          2\n 8  2029          8          48          6\n 9  2030          4          18          4\n10  2031          3          18          0\n11  2032          0           4          0\n12  2033          2           4          0\n13  2034          7          13          0\n14  2035          7          10          0\n15  2036          1           3          0\n16  2037          1           5          0\n17  2038          5           4          0\n18  2040          1           3          0\n\n\n\n\n4.2.4 Plotting the line chart of the popularity of Oceanus Folk\n\ndf_long &lt;- df_yearly %&gt;%\n  pivot_longer(\n    cols = c(ComposerOf, PerformerOf, ProducerOf),\n    names_to  = \"rel_type\",\n    values_to = \"count\"\n  )\nggplot(df_long, aes(x = year, y = count, color = rel_type)) +\n  geom_line(size = 1.2) +\n  geom_point(size = 3) +\n  scale_x_continuous(breaks = df_yearly$year) +\n  scale_color_manual(\n    name   = \"Relation Type\",\n    values = c(\n      ComposerOf  = \"lightblue\",  \n      PerformerOf = \"black\",  \n      ProducerOf  = \"gray\"   \n    )\n  ) +\n  labs(\n    title = \"Popularity of Oceanus Folk songs and albums after 2022\",\n    x     = \"Year\",\n    y     = \"Count\",\n    color = \"Relation Type\"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 12),\n    axis.text  = element_text(size = 11),\n    legend.title = element_text(size = 12),\n    legend.text  = element_text(size = 11)\n  )\n\n\n\n\n\n\n\n\nBig picture Three distinct “Sailor pulses.” Performer spikes (2023, 2026, 2029) align exactly with:\nthe Ivy Echoes boom,\ntheir farewell, and\nSailor’s Roots & Tides comeback. Each pulse corresponds to a rebound or preservation of the 100 % (or near-perfect) top-chart ratio on the first graph.\nQuality vs. quantity hinges on unified branding. When large output is driven by a cohesive banner (Ivy Echoes, Roots & Tides), the genre keeps its hit-making reputation. When volume grows without Sailor’s direct stamp (mid-2020s), success rates slip.\nPost-2030 fade shows influence isn’t permanent without stewardship. Composer and producer lines outlive performer activity—reflecting Maya’s writing gigs and Sophie’s studio career—but neither is enough to maintain mainstream traction. The genre becomes boutique again until Sailor’s 2040 homecoming.\nSilas Reed’s editorial angle. These intertwined trajectories visually prove his thesis: Oceanus Folk’s rise, dips, and mini-revivals are inseparable from Sailor Shift’s career choices—whether she’s front-stage, curating collaborations, or momentarily absent from the scene.\nUse the two visuals together in the article:\nFigure 1 (2019-29 panels) to show the front-end outcomes—chart success and release volume.\nFigure 2 (role-based 2022-40 plot) to uncover the back-end mechanics—who is writing, performing, producing, and how that ebbs when Sailor steps away."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-influence-graph---the-genre-of-music-most-influenced-by-oceanus-folk",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-influence-graph---the-genre-of-music-most-influenced-by-oceanus-folk",
    "title": "Take-home_Ex02",
    "section": "5.1 Visualizing the influence Graph - The genre of music most influenced by Oceanus Folk",
    "text": "5.1 Visualizing the influence Graph - The genre of music most influenced by Oceanus Folk\n\n5.1.1 Defining the influence types\n\ninfluence_types &lt;- c(\n  \"CoverOf\",\n  \"InStyleOf\",\n  \"DirectlySamples\",\n  \"InterpolatesFrom\",\n  \"LyricalReferenceTo\"\n)\nedges2 &lt;- edges_tbl %&gt;% rename(rel_type = `Edge Type`)\n\n\n\n5.1.2 Filtering the Data\n\n# 1.1 Extracting \ndirect_edges &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types) %&gt;%\n  semi_join(\n    nodes_tbl %&gt;% filter(`Node Type` == \"Song\", genre == \"Oceanus Folk\") %&gt;% select(id),\n    by = c(\"target\" = \"id\")\n  )\n\n\n\n5.1.3 Filtering the songs that are influenced by Oceanus Folks but do not belongs to Oceanus Folk\n\ndirect_songs &lt;- nodes_tbl %&gt;%\n  filter(\n    id %in% direct_edges$source,\n    `Node Type` == \"Song\",\n    genre != \"Oceanus Folk\"\n  ) %&gt;%\n  select(song_id = id, song_name = name, release_date, genre)\nartist_songs &lt;- edges2 %&gt;%\n  filter(rel_type == \"PerformerOf\") %&gt;%\n  semi_join(\n    nodes_tbl %&gt;% filter(name %in% c(\"Sailor Shift\", \"Ivy Echoes\")) %&gt;% select(id),\n    by = c(\"source\" = \"id\")\n  ) %&gt;%\n  pull(target) %&gt;%\n  unique() %&gt;%\n  { nodes_tbl %&gt;%\n      filter(\n        id %in% .,\n        `Node Type` == \"Song\",\n        genre != \"Oceanus Folk\"\n      ) %&gt;%\n      select(song_id = id, song_name = name, release_date, genre)\n  }\n\n\n\n5.1.4 Combine the data\n\nstep1_songs &lt;- bind_rows(direct_songs, artist_songs) %&gt;%\n  distinct(song_id, song_name, release_date, genre)\nstep1_songs\n\n# A tibble: 109 × 4\n   song_id song_name                    release_date genre          \n     &lt;int&gt; &lt;chr&gt;                        &lt;chr&gt;        &lt;chr&gt;          \n 1     196 Radiant Dreams               2017         Indie Folk     \n 2     925 Liminal Passage              2027         Indie Folk     \n 3    1069 Behind the Picture Glass     2026         Synthwave      \n 4    1313 Radiance of the Heart        2029         Synthwave      \n 5    1629 Legionary's Lament           2023         Desert Rock    \n 6    1874 Dusty Miles                  2023         Dream Pop      \n 7    2260 Inherited Arguments          2029         Symphonic Metal\n 8    2272 Borrowed Time                2022         Space Rock     \n 9    2379 Unwanted (And Still Waiting) 2027         Synthpop       \n10    3053 Dreaming in Technicolor      2024         Desert Rock    \n# ℹ 99 more rows\n\n\n\nsecond_edges &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types) %&gt;%\n  semi_join(\n    step1_songs %&gt;% select(id = song_id),\n    by = c(\"target\" = \"id\")\n  )\n\nstep2_songs &lt;- nodes_tbl %&gt;%\n  filter(\n    id %in% second_edges$source,\n    `Node Type` == \"Song\",\n    genre != \"Oceanus Folk\"\n  ) %&gt;%\n  select(song_id = id, song_name = name, release_date, genre) %&gt;%\n  distinct()\nstep2_songs\n\n# A tibble: 70 × 4\n   song_id song_name                         release_date genre     \n     &lt;int&gt; &lt;chr&gt;                             &lt;chr&gt;        &lt;chr&gt;     \n 1     210 Luminous Path                     2029         Darkwave  \n 2     321 Soil of My Soul                   2025         Space Rock\n 3     901 Approaching Silhouettes           2029         Space Rock\n 4    1076 Snapshot Shadows                  2025         Dream Pop \n 5    1358 If Freedom Were an Open Door      2027         Dream Pop \n 6    1970 Footsteps in the Forest's Embrace 2027         Darkwave  \n 7    3358 Carry Me Through                  2017         Dream Pop \n 8    3580 Shadows of Unexpressed Feelings   2027         Dream Pop \n 9    3652 Wishful Thinking Anthem           2025         Dream Pop \n10    4085 Balcony Heartbreak                2023         Indie Folk\n# ℹ 60 more rows\n\ninfl_edges &lt;- edges_tbl %&gt;%\n  rename(rel_type = `Edge Type`) %&gt;%\n  filter(rel_type %in% influence_types)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-level-of-influences-by-oceanus-folk-of-all-genres-of-music",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-level-of-influences-by-oceanus-folk-of-all-genres-of-music",
    "title": "Take-home_Ex02",
    "section": "5.2 Visualizing the level of influences by Oceanus Folk of all genres of music",
    "text": "5.2 Visualizing the level of influences by Oceanus Folk of all genres of music\n\n5.2.1 Extracting the data of genre of songs and album\n\ninfl_genre &lt;- infl_edges %&gt;%\n  left_join(\n    nodes_tbl %&gt;% select(id, genre),\n    by = c(\"target\" = \"id\")\n  ) %&gt;%\n  filter(!is.na(genre))   \n\n\n\n5.2.2 Grouping the data by Genre and rel_tyoe\n\ngenre_influence_counts &lt;- infl_genre %&gt;%\n  group_by(genre, rel_type) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(\n    names_from  = rel_type,\n    values_from = count,\n    values_fill = 0\n  ) %&gt;%\n  arrange(genre)\ngenre_influence_counts\n\n# A tibble: 24 × 6\n   genre   CoverOf DirectlySamples InStyleOf InterpolatesFrom LyricalReferenceTo\n   &lt;chr&gt;     &lt;int&gt;           &lt;int&gt;     &lt;int&gt;            &lt;int&gt;              &lt;int&gt;\n 1 Altern…      53              22        87               67                 75\n 2 Americ…      29              13        62               39                 43\n 3 Avant-…      29              16        47               28                 33\n 4 Blues …      26               9        44               39                 33\n 5 Celtic…       0               0         0                0                  1\n 6 Darkwa…      27              19        47               30                 28\n 7 Desert…      19               9        35               35                 20\n 8 Doom M…     156              83       270              178                165\n 9 Dream …     168              77       245              188                168\n10 Emo/Po…      45              18        71               37                 42\n# ℹ 14 more rows\n\n\n\n\n5.2.3 Defining the Edges and Nodes\n\nedges2 &lt;- edges_tbl %&gt;% rename(rel_type = `Edge Type`)\n\ngenre_counts &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types) %&gt;%\n  semi_join(\n    nodes_tbl %&gt;% filter(`Node Type` == \"Song\", genre == \"Oceanus Folk\") %&gt;% select(id),\n    by = c(\"target\"=\"id\")\n  ) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, genre), by = c(\"source\"=\"id\")) %&gt;%\n  filter(!is.na(genre)) %&gt;%\n  group_by(genre, rel_type) %&gt;%\n  summarise(n = n(), .groups=\"drop\") %&gt;%\n  pivot_wider(names_from = rel_type, values_from = n, values_fill = 0) %&gt;%\n  filter(genre != \"Oceanus Folk\") %&gt;%\n  mutate(total_genre = rowSums(select(., all_of(influence_types))))\n\nrel_totals &lt;- colSums(select(genre_counts, all_of(influence_types)))\n\n# Defining the Nodes\nnodes &lt;- bind_rows(\n  tibble(id = \"Oceanus Folk\", type = \"central\", count = sum(genre_counts$total_genre)),\n  tibble(id = genre_counts$genre, type = \"genre\", count = genre_counts$total_genre),\n  tibble(id = influence_types, type = \"reltype\", count = as.integer(rel_totals))\n)\nedges1 &lt;- tibble(\n  from   = \"Oceanus Folk\",\n  to     = genre_counts$genre,\n  weight = genre_counts$total_genre\n)\nedges2 &lt;- genre_counts %&gt;%\n  pivot_longer(all_of(influence_types), names_to=\"to\", values_to=\"weight\") %&gt;%\n  filter(weight&gt;0) %&gt;%\n  transmute(from = genre, to = to, weight = weight)\n\nedges &lt;- bind_rows(edges1, edges2)\n\n\n\n5.2.4 Plotting the graph\n\ngraph_plot &lt;- tbl_graph(nodes, edges, directed = FALSE)\n\ngenres  &lt;- nodes %&gt;% filter(type==\"genre\")  %&gt;% pull(id)\nrels    &lt;- nodes %&gt;% filter(type==\"reltype\")%&gt;% pull(id)\nang_g   &lt;- seq(0, 2*pi, length.out=length(genres)+1)[-1]\nang_r   &lt;- seq(0, 2*pi, length.out=length(rels)+1)[-1]\nlayout  &lt;- tibble(\n  id = c(\"Oceanus Folk\", genres, rels),\n  x  = c(0, cos(ang_g), 2*cos(ang_r)),\n  y  = c(0, sin(ang_g), 2*sin(ang_r))\n)\n\nl &lt;- create_layout(graph_plot, layout=\"manual\", x=layout$x, y=layout$y)\n\nggraph(l) +\n  geom_edge_link(aes(width=weight), color=\"grey70\", alpha=0.8) +\n  scale_edge_width(range=c(0.2,1.5)) +\n  geom_node_point(aes(size=count, fill=type), shape=21, color=\"black\") +\n  scale_size_area(max_size=15) +\n  scale_fill_manual(values=c(central=\"#1f78b4\", genre=\"#33a02c\", reltype=\"#e31a1c\")) +\n  geom_node_text(aes(label=id), repel=TRUE, size=3) +\n  theme_void() +\n  labs(title=\"Oceanus Folk → Genres → Influence Types (Excluding Oceanus Folk)\")  \n\n\n\n\n\n\n\n\nConnecting all three visuals (timelines + role-plot + influence-network) Chart dominance ↔︎ thick influence spokes. 2019-23 and 2029 show both high hit-rates and vigorous multi-genre edges (especially Cover / InStyleOf). 2028 dip = thin performer/composer counts and (in the knowledge graph) fewer new outward edges.\nRole diversity precedes genre diffusion. The 2026 farewell spike sees composer and producer nodes busy → graph shows wider CoverOf edges the following year (artists re-working Ivy Echoes catalog).\nStewardship matters. After Sailor’s focus shifts in the early 2030s, performer/composer lines flatten, and here we see few thick new edges—Oceanus Folk’s brokerage power wanes until her 2040 homecoming.\nAdditional clues from the influence-types Re-interpretation over raw sampling – InStyleOf, CoverOf, and InterpolatesFrom account for most heavy edges, whereas DirectlySamples has the thinnest fan-out. Oceanus Folk is being re-performed and referenced far more than it is sampled.\nStory-telling travels as lyrics – the right-hand red node LyricalReferenceTo links Oceanus Folk to Alt-Rock and Synthwave, underscoring that even when the acoustic sound is left behind, the maritime imagery and narrative structure live on.\nThe genres soaking up Oceanus Folk influence most heavily are Desert Rock and Doom Metal, followed by the more predictable Indie Folk and crossover styles like Dream Pop and Synthwave. Musicians in those scenes aren’t grabbing raw samples; instead, they cover, reinterpret, or insert folk chord-loops and sea-faring lyrics into their own soundscapes. That pattern reinforces Oceanus Folk’s role as a story-telling blueprint rather than a beat library."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualzing-the-most-influenced-artist-by-oceanus-folk",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualzing-the-most-influenced-artist-by-oceanus-folk",
    "title": "Take-home_Ex02",
    "section": "5.2 Visualzing the most influenced artist by Oceanus Folk",
    "text": "5.2 Visualzing the most influenced artist by Oceanus Folk\n\n5.2.1 Defining the Edges\n\nedges2 &lt;- edges_tbl %&gt;% rename(rel_type = `Edge Type`)\n\n\n\n5.2.3 Filtering the Oceanus Folk songs\n\noceanus_song_ids &lt;- nodes_tbl %&gt;%\n  filter(`Node Type` == \"Song\", genre == \"Oceanus Folk\") %&gt;%\n  pull(id)\n\nstep1_song_ids &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% oceanus_song_ids) %&gt;%\n  pull(source) %&gt;%\n  unique()\n\n\n\n5.2.4 Filtering the songs influenced by the Oceanus songs\n\nstep2_song_ids &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% step1_song_ids) %&gt;%\n  pull(source) %&gt;%\n  unique()\n\n\n\n5.2.5 Combining the songs influenced by Oceanus Folks\n\n# 5. 合并所有受影响的歌曲 ID\nall_song_ids &lt;- unique(c(step1_song_ids, step2_song_ids))\n\n# 6. 统计演唱者（包括 Person 和 MusicalGroup），排除姓名 NA\nperformer_counts &lt;- edges2 %&gt;%\n  filter(rel_type == \"PerformerOf\", target %in% all_song_ids) %&gt;%\n  count(source, name = \"song_count\") %&gt;%\n  rename(performer_id = source) %&gt;%\n  left_join(\n    nodes_tbl %&gt;%\n      filter(`Node Type` %in% c(\"Person\", \"MusicalGroup\")) %&gt;%\n      select(performer_id = id, performer = name),\n    by = \"performer_id\"\n  ) %&gt;%\n  filter(!is.na(performer))\n\n\n\n5.2.6 Listing the top 5 artist influenced by Oceanus Folk\n\ntop5 &lt;- performer_counts %&gt;%\n  slice_max(song_count, n = 5)\ntop5\n\n# A tibble: 7 × 3\n  performer_id song_count performer    \n         &lt;int&gt;      &lt;int&gt; &lt;chr&gt;        \n1         2006          5 Filippo Pelli\n2         1180          4 Guiying Liao \n3         1182          4 Yan Zou      \n4         1492          4 Juan Yu      \n5         1493          4 Lei Jin      \n6         4394          4 Xiuying Li   \n7         4395          4 Xia Cui      \n\n\n\n\n5.2.7 Defining the types of influence and Edges\n\ninfluence_types &lt;- c(\n  \"CoverOf\", \"InStyleOf\", \"DirectlySamples\",\n  \"InterpolatesFrom\", \"LyricalReferenceTo\"\n)\nedges2 &lt;- edges_tbl %&gt;% rename(rel_type = `Edge Type`)\nof_song_ids &lt;- nodes_tbl %&gt;%\n  filter(`Node Type` == \"Song\", genre == \"Oceanus Folk\") %&gt;%\n  pull(id)\n\n\n\n5.2.8 Filtering and Listing the songs ID influenced by Oceanus Folk\n\nstep1_song_ids &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% of_song_ids) %&gt;%\n  pull(source) %&gt;% unique()\n\nstep2_song_ids &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% step1_song_ids) %&gt;%\n  pull(source) %&gt;% unique()\n\nall_song_ids &lt;- unique(c(step1_song_ids, step2_song_ids))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#calculating-the-times-of-these-singers-performing-infuenced-songs",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#calculating-the-times-of-these-singers-performing-infuenced-songs",
    "title": "Take-home_Ex02",
    "section": "5.3 Calculating the times of these singers performing inf;uenced songs",
    "text": "5.3 Calculating the times of these singers performing inf;uenced songs\n\n5.3.1 Defining the Edges\n\ndirect_edges &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% of_song_ids) %&gt;%\n  transmute(influenced_song_id = source, influence_type = rel_type)\n\nsecond_edges &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% step1_song_ids) %&gt;%\n  transmute(influenced_song_id = source, influence_type = rel_type)\n\nall_influence_edges &lt;- bind_rows(direct_edges, second_edges)\n\n\n\n5.3.2 Collecting the influeced songs performed by Top 5 artist\n\nperformer_edges &lt;- edges2 %&gt;%\n  filter(\n    rel_type == \"PerformerOf\",\n    source   %in% top5$performer_id,\n    target   %in% all_song_ids\n  ) %&gt;%\n  transmute(performer_id = source, song_id = target)\n\ntable_top5 &lt;- performer_edges %&gt;%\n  left_join(top5 %&gt;% select(performer_id, performer), by = \"performer_id\") %&gt;%\n  left_join(all_influence_edges, by = c(\"song_id\" = \"influenced_song_id\")) %&gt;%\n  left_join(\n    nodes_tbl %&gt;% select(id, name, `Node Type`),\n    by = c(\"song_id\" = \"id\")\n  ) %&gt;%\n  select(\n    performer,\n    song_or_album = name,\n    node_type     = `Node Type`,\n    influence_type\n  ) %&gt;%\n  arrange(performer, song_or_album)\n\nWarning in left_join(., all_influence_edges, by = c(song_id = \"influenced_song_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 12 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n5.3.3 Summary Table\n\ntable_top5\n\n# A tibble: 82 × 4\n   performer     song_or_album                   node_type influence_type    \n   &lt;chr&gt;         &lt;chr&gt;                           &lt;chr&gt;     &lt;chr&gt;             \n 1 Filippo Pelli Carry Me Through                Song      CoverOf           \n 2 Filippo Pelli Carry Me Through                Song      InStyleOf         \n 3 Filippo Pelli Carry Me Through                Song      CoverOf           \n 4 Filippo Pelli Carry Me Through                Song      InStyleOf         \n 5 Filippo Pelli Glance My Way                   Song      InStyleOf         \n 6 Filippo Pelli Lonesome Trail Ballad           Song      CoverOf           \n 7 Filippo Pelli Roadside Memories               Song      CoverOf           \n 8 Filippo Pelli Welcome to the Kemono Sanctuary Song      LyricalReferenceTo\n 9 Guiying Liao  Aerial Conquistadors            Song      InterpolatesFrom  \n10 Guiying Liao  Aerial Conquistadors            Song      InterpolatesFrom  \n# ℹ 72 more rows\n\n\n\n\n5.3.4 Plotting the Graph\n\ninfluence_types &lt;- c(\n  \"LyricistOf\",\"RecordedBy\",\"DistributedBy\",\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\n  \"LyricalReferenceTo\",\"DirectlySamples\"\n)\nedges2 &lt;- edges_tbl %&gt;% rename(rel_type = `Edge Type`)\n\n# 2. Oceanus Folk 的 Song ID\nof_song_ids &lt;- nodes_tbl %&gt;%\n  filter(`Node Type`==\"Song\", genre==\"Oceanus Folk\") %&gt;%\n  pull(id)\n\nstep1 &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% of_song_ids) %&gt;%\n  pull(source) %&gt;% unique()\nstep2 &lt;- edges2 %&gt;%\n  filter(rel_type %in% influence_types, target %in% step1) %&gt;%\n  pull(source) %&gt;% unique()\nall_songs &lt;- unique(c(step1, step2))\n\nperformer_counts &lt;- edges2 %&gt;%\n  filter(rel_type==\"PerformerOf\", target %in% all_songs) %&gt;%\n  count(source, name=\"song_count\") %&gt;%\n  rename(performer_id = source) %&gt;%\n  left_join(\n    nodes_tbl %&gt;% \n      filter(`Node Type` %in% c(\"Person\",\"MusicalGroup\")) %&gt;%\n      select(performer_id = id, performer = name),\n    by=\"performer_id\"\n  ) %&gt;%\n  filter(!is.na(performer))\n\ntop5 &lt;- performer_counts %&gt;% \n  slice_max(order_by=song_count, n=5, with_ties=TRUE)\ntop5_ids &lt;- top5$performer_id\n\nperf_edges &lt;- edges2 %&gt;%\n  filter(rel_type==\"PerformerOf\",\n         source %in% top5_ids,\n         target %in% all_songs) %&gt;%\n  transmute(song_id      = target,\n            performer_id = source)\n\nnodes_songs &lt;- perf_edges %&gt;%\n  distinct(song_id) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name, `Node Type`), \n            by=c(\"song_id\"=\"id\")) %&gt;%\n  transmute(\n    orig_id   = song_id,\n    name      = name,\n    type      = `Node Type`,\n    size      = 1,\n    bipartite = FALSE\n  )\n\nnodes_perf &lt;- top5 %&gt;%\n  transmute(\n    orig_id   = performer_id,\n    name      = performer,\n    type      = \"Performer\",\n    size      = song_count,\n    bipartite = TRUE\n  )\n\nnodes_net &lt;- bind_rows(nodes_songs, nodes_perf) %&gt;%\n  distinct(orig_id, .keep_all=TRUE) %&gt;%\n  arrange(bipartite, name) %&gt;%\n  mutate(node_index = row_number())\n\nedges_net &lt;- perf_edges %&gt;%\n  left_join(nodes_net %&gt;% select(orig_id, node_index), \n            by = c(\"song_id\"      = \"orig_id\")) %&gt;%\n  rename(from = node_index) %&gt;%\n  left_join(nodes_net %&gt;% select(orig_id, node_index), \n            by = c(\"performer_id\" = \"orig_id\")) %&gt;%\n  rename(to   = node_index) %&gt;%\n  transmute(from, to)\n\ngraph_net &lt;- tbl_graph(nodes = nodes_net, edges = edges_net, directed = FALSE)\n\nggraph(graph_net, layout = \"bipartite\", types = nodes_net$bipartite) +\n  geom_edge_link(color = \"grey70\", alpha = 0.7) +\n  geom_node_point(aes(size = size, fill = type), shape = 21) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  scale_fill_manual(\n    values = c(\"Song\" = \"#33a02c\", \"Album\" = \"red\", \"Performer\" = \"#1f78b4\")\n  ) +\n  scale_size_area(max_size = 8) +\n  theme_void() +\n  labs(\n    title    = \"Top 5 Performers ← PerformerOf ← 29 Songs/Albums\",\n    subtitle = \"The Top 5 Artist Influenced by Oceanus Folk Music\"\n  )\n\nWarning: ggrepel: 7 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\nConcentration, not collaboration\nEvery green song node connects to one blue performer only—no songs are shared across artists—so each singer is independently producing Oceanus-Folk-tinged material rather than collaborating on the same tracks.\nSingles over albums\nOnly one red node (“Instrument Failure”) appears, meaning just one full album is tagged with the style among these 29 releases. Most artists are testing the waters via singles or EP tracks.\nGeographic spread\nChinese-sounding names dominate (Guiying Liao, Yan Zou, Xiuying Li, Lei Jin, etc.), but Filippo Pelli’s presence shows the influence has leapt to at least one Western artist—mirroring Desert-Rock and Dream-Pop crossovers seen in the genre network.\nDepth versus breadth\nGuiying Liao and Yan Zou together account for ~40 % of all Oceanus-Folk performer edges here, acting as principal carriers of the sound in the late 2030s (compare the small role counts in the time–series plot after 2032).\nAfter Sailor Shift’s 2029 ‘Roots & Tides’ push, Oceanus Folk splintered into a handful of ‘torch-bearer’ vocalists. Guiying Liao and Yan Zou led the charge, each releasing half-a-dozen folk-infused singles, while Italy’s Filippo Pelli proved the genre’s reach beyond Oceanus and Asia. Interestingly, only a single full-length album—Instrument Failure—surfaced; the rest were standalone tracks, suggesting artists were experimenting rather than reconstructing their entire sound."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-sailor-shift-influences-to-oceanus-folk",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-sailor-shift-influences-to-oceanus-folk",
    "title": "Take-home_Ex02",
    "section": "5.4 Visualizing the Sailor Shift influences to Oceanus Folk",
    "text": "5.4 Visualizing the Sailor Shift influences to Oceanus Folk\n\n5.4.1 Defining the types of relation\n\nrel_types &lt;- c(\n  \"LyricistOf\", \"RecordedBy\", \"DistributedBy\",\n  \"InStyleOf\", \"InterpolatesFrom\", \"CoverOf\",\n  \"LyricalReferenceTo\", \"DirectlySamples\"\n)\n\n\n\n5.4.2 Defining the Edges and Extracting the Year data of Oceanus Folks songs\n\nedges2 &lt;- edges_tbl %&gt;% rename(rel_type = `Edge Type`)\n\noceanus_songs &lt;- nodes_tbl %&gt;%\n  filter(\n    `Node Type` == \"Song\",\n    genre        == \"Oceanus Folk\",\n    !is.na(release_date),\n    str_detect(release_date, \"^\\\\d{4}\")\n  ) %&gt;%\n  mutate(year = as.integer(str_extract(release_date, \"^\\\\d{4}\"))) %&gt;%\n  filter(year &gt;= 2022) %&gt;%\n  select(id, year)\n\n\n\n5.4.3 Calculating the data by years\n\ncounts_by_year &lt;- edges2 %&gt;%\n  filter(rel_type %in% rel_types) %&gt;%\n  # 标记针对 Oceanus Folk song 的边：LyricistOf 用 target，其它用 source\n  mutate(song_id = if_else(rel_type == \"LyricistOf\", target, source)) %&gt;%\n  inner_join(oceanus_songs, by = c(\"song_id\" = \"id\")) %&gt;%\n  group_by(year, rel_type) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(\n    names_from  = rel_type,\n    values_from = count,\n    values_fill = 0\n  ) %&gt;%\n  arrange(year)\n\nmedia_counts &lt;- nodes_tbl %&gt;%\n  filter(\n    `Node Type` %in% c(\"Song\", \"Album\"),\n    genre        == \"Oceanus Folk\",\n    !is.na(release_date),\n    str_detect(release_date, \"^\\\\d{4}\")\n  ) %&gt;%\n  mutate(year = as.integer(str_extract(release_date, \"^\\\\d{4}\"))) %&gt;%\n  filter(year &gt;= 2022) %&gt;%\n  count(year, `Node Type`) %&gt;%\n  pivot_wider(\n    names_from  = `Node Type`,\n    values_from = n,\n    values_fill = 0\n  ) %&gt;%\n  rename(\n    song_count  = Song,\n    album_count = Album\n  ) %&gt;%\n  arrange(year)\n\n# 6. 合并两张表\nfinal_table &lt;- counts_by_year %&gt;%\n  left_join(media_counts, by = \"year\")\n\n\n\n5.4.4 Summary Table\n\n# 7. 查看最终结果\nfinal_table\n\n# A tibble: 17 × 11\n    year CoverOf DistributedBy InStyleOf LyricistOf RecordedBy DirectlySamples\n   &lt;int&gt;   &lt;int&gt;         &lt;int&gt;     &lt;int&gt;      &lt;int&gt;      &lt;int&gt;           &lt;int&gt;\n 1  2022       1             2         2          2          2               0\n 2  2023       9            22        16         23         27               4\n 3  2024       4             6         1          6          6               1\n 4  2025       3             3         3          5          5               0\n 5  2026       8            11        13         11         17               6\n 6  2027       8             3         4          1          4               2\n 7  2028       1             2         6          2          2               0\n 8  2029       8             3         9          6          4               4\n 9  2030       1             0         6          2          2               0\n10  2031       4             0         1          0          0               1\n11  2032       0             0         1          0          0               0\n12  2033       0             0         0          0          0               0\n13  2034       0             0         1          0          0               0\n14  2035       0             0         1          0          0               1\n15  2036       0             0         1          0          0               0\n16  2037       1             0         2          0          0               1\n17  2038       0             0         1          0          0               1\n# ℹ 4 more variables: InterpolatesFrom &lt;int&gt;, LyricalReferenceTo &lt;int&gt;,\n#   album_count &lt;int&gt;, song_count &lt;int&gt;\n\n\n\n\n5.4.5 Setting the data table\n\nplot_df &lt;- final_table %&gt;%\n  filter(year &gt;= 2025, year &lt;= 2035) %&gt;%\n  pivot_longer(\n    cols = -year,\n    names_to  = \"variable\",\n    values_to = \"count\"\n  )\n\n\n\n5.4.6 Plotting the graph\n\nggplot(plot_df, aes(x = year, y = count, color = variable)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  scale_x_continuous(breaks = 2025:2035) +\n  labs(\n    title = \"Trend of Oceanus Folk Music from 2022 - 2035\",\n    x     = \"Year\",\n    y     = \"Numbers\",\n    color = \"Indications\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\nThe plot tracks nine counts per year: overall song & album tallies plus seven influence-edge types (CoverOf, InStyleOf, etc.). The pink “song_count” line is a convenient proxy for activity; the coloured influence lines show how that activity connects back to Oceanus Folk. Overlay Sailor’s timeline and three distinct pulses emerge.\nBetween those peaks the lines flatten:\n2027–28 dip – After the farewell tour, Sailor pivots to an Indie-Pop viral hit (outside the Oceanus tag), leaving only residual covers/interpolations.\n2031 – A small RecordedBy spike (10) but virtually no InStyleOf/CoverOf activity → Sailor or Sophie took producer roles on isolated projects, not enough to reignite broad stylistic borrowing.\n2032–33 trough – All metrics near zero when Sailor’s focus is fully global, confirming that the genre lacks natural momentum without her stewardship.\nSynthesis Sailor’s direct engagement is the primary accelerator. Years she releases or curates (2026, 2029) show multi-line surges; years she steps back (2027, 2032) every metric collapses.\nHomage beats sampling. Peaks favour InStyleOf and CoverOf, while DirectlySamples remains minimal across the entire window—mirroring Sailor’s preference for reinterpretation over raw stem usage.\nProducer influence outlasts performer presence. Even when song_count is low (2031, 2034) a RecordedBy rise signals Sophie or Sailor shaping releases behind the console.\nAlbum culture stays niche. album_count never exceeds three in any year; Oceanus Folk influence spreads mostly via singles and collaborations—consistent with streaming-era listening habits."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#note",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#note",
    "title": "Hands-on_Ex04",
    "section": "Note:",
    "text": "Note:\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "title": "Hands-on_Ex04",
    "section": "Reference",
    "text": "Reference\nIntroducing Ridgeline Plots (formerly Joyplots) Claus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10. Allen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63. Dots + interval stats and geoms"
  }
]